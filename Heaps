#include <bits/stdc++.h>
using namespace std;

class heap {
public:
  int arr[100];
  int size;

  heap() {
    size = 0;
    arr[0] = -1;
  }

  void insert(int val) {
    size = size + 1;
    int index = size;
    arr[index] = val;

    while (index > 1) {
      int parent = index / 2;
      if (arr[parent] < arr[index]) {
        swap(arr[parent], arr[index]);
        index = parent;
      } else {
        break;
      }
    }
  }

  void print() {
    for (int i = 1; i <= size; i++) {
      cout << arr[i] << " ";
    }
    cout << endl;
  }

  void deleteFromHeap() {
    if (size == 0) {
      cout << "Nothing to delete" << endl;
      return;
    }

    // Step 1 : replacing first node with last node
    arr[1] = arr[size];

    // Step 2 : removing last node
    size--;

    // Step 3 : Taking the last element to its correct position
    int index = 1;
    while (index <= size) {
      int leftIndex = 2 * index;
      int rightIndex = 2 * index + 1;
      if (arr[index] < arr[leftIndex] && leftIndex <= size) {
        swap(arr[index], arr[leftIndex]);
        index = leftIndex;
      } else if (arr[index] < arr[rightIndex] && rightIndex <= size) {
        swap(arr[index], arr[rightIndex]);
        index = rightIndex;
      } else {
        return;
      }
    }
  }
};

void heapify(int arr[], int size, int i) {
  int largest = i;
  int left = 2 * i;
  int right = 2 * i + 1;

  // use left<=size in 1-based indexing in 0-based < has to be used
  if (left <= size && arr[largest] < arr[left]) {
    largest = left;
  } // use if for right comparison as else if will be implemented once left
  if (right <= size && arr[largest] < arr[right]) { // gets false
    largest = right;
  }

  if (largest != i) {
    swap(arr[largest], arr[i]);
    heapify(arr, size, largest);
  }
}

void heapSort(int arr[], int size) {

  while (size > 1) {
    // Step 1
    swap(arr[1], arr[size]);
    size--;

    // step 2 : heapify the root element
    heapify(arr, size, 1);
  }
}

int main() {
  heap h;
  h.insert(50);
  h.insert(55);
  h.insert(53);
  h.insert(52);
  h.insert(54);
  h.print();
  h.deleteFromHeap();
  h.print();

  int arr[6] = {-1, 54, 53, 55, 52, 50};
  int size = 5;
  for (int i = size / 2; i > 0; i--) {
    heapify(arr, size, i);
  }

  cout << "Printing the array(heapify)" << endl;
  for (int i = 1; i <= 5; i++) {
    cout << arr[i] << " ";
  }
  cout << endl;

  heapSort(arr, 5);

  cout << "Printing the array(heap sort)" << endl;
  for (int i = 1; i <= 5; i++) {
    cout << arr[i] << " ";
  }
  cout << endl;

  // STL

  // maxHeap
  // By default it maxHeap
  priority_queue<int> pq;
  pq.push(4);
  pq.push(2);
  pq.push(5);
  pq.push(3);

  cout << "Element at top " << pq.top() << endl;
  pq.pop();
  cout << "Element at top " << pq.top() << endl;

  cout << "Size of it is " << pq.size() << endl;

  if (pq.empty()) {
    cout << "It is empty" << endl;
  } else {
    cout << "It is not empty" << endl;
  }

  // minHeap
  priority_queue<int, vector<int>, greater<int>> minHeap;
  minHeap.push(4);
  minHeap.push(2);
  minHeap.push(5);
  minHeap.push(3);

  cout << "Element at top " << minHeap.top() << endl;
  minHeap.pop();
  cout << "Element at top " << minHeap.top() << endl;

  cout << "Size of it is " << minHeap.size() << endl;

  if (minHeap.empty()) {
    cout << "It is empty" << endl;
  } else {
    cout << "It is not empty" << endl;
  }
}
