#include <bits/stdc++.h>
using namespace std;

class Node {
public:
  int data;
  Node *next;

  // constructor
  Node(int d) {
    this->data = d;
    this->next = NULL;
  }

  // destructor
  ~Node() {
    if (this->next != NULL) {
      delete next;
      next = NULL;
    }
  }
};

void insertNode(Node *&tail, int element, int d) {
  if (tail == NULL) {
    // empty list
    Node *newNode = new Node(d);
    tail = newNode;
    newNode->next = newNode;
  } else {
    // Non-empty list
    // assuming that the element is present
    Node *curr = tail;
    while (curr->data != element) {
      curr = curr->next;
    }

    Node *temp = new Node(d);
    temp->next = curr->next;
    curr->next = temp;
  }
}

void print(Node *tail) {
  if (tail == NULL) {
    cout << "List is empty" << endl;
    return;
  }
  Node *temp = tail;
  do {
    cout << temp->data << " ";
    temp = temp->next;
  } while (temp != tail);
  cout << endl;
}

void deleteNode(Node *&tail, int value) {
  // empty list
  if (tail == NULL) {
    cout << "list is empty,please check again" << endl;
  } else {
    // non-empty list
    Node *prev = tail;
    Node *curr = prev->next;
    while (curr->data != value) {
      prev = curr;
      curr = curr->next;
    }

    // 1 node linked list
    if (prev == curr) {
      tail = NULL;
    }

    //>=2 node linked list
    else if (tail == curr) {
      tail = prev;
    }

    prev->next = curr->next;
    curr->next = NULL;
    delete curr;
  }
}

bool isCircular(Node *head) {
  if (head == NULL) {
    return 0;
  }

  Node *temp = head->next;
  while (temp->next != NULL && temp != head) {
    temp = temp->next;
  }

  return temp == head;
}

int main() {
  Node *tail = NULL;

  insertNode(tail, 5, 3);
  print(tail);

  insertNode(tail, 3, 5);
  print(tail);

  insertNode(tail, 5, 7);
  print(tail);

  insertNode(tail, 7, 9);
  print(tail);

  insertNode(tail, 7, 8);
  print(tail);

  insertNode(tail, 3, 4);
  print(tail);

  insertNode(tail, 9, 10);
  print(tail);

  insertNode(tail, 5, 6);
  print(tail);

  deleteNode(tail, 10);
  print(tail);

  if (isCircular(tail)) {
    cout << "Linked List is circular" << endl;
  } else {
    cout << "Linked List is not circular" << endl;
  }
}
