#include <bits/stdc++.h>
using namespace std;

class Node {
public:
  int data;
  Node *left;
  Node *right;

  Node(int d) {
    this->data = d;
    this->left = NULL;
    this->right = NULL;
  }
};

void inorder(Node *root) {
  if (root == NULL)
    return;

  inorder(root->left);
  cout << root->data << " ";
  inorder(root->right);
}

void postorder(Node *root) {
  if (root == NULL)
    return;

  postorder(root->left);
  postorder(root->right);
  cout << root->data << " ";
}

void preorder(Node *root) {
  if (root == NULL) {
    return;
  }

  cout << root->data << " ";
  preorder(root->left);
  preorder(root->right);
}

vector<vector<int>> levelOrder(Node *root) {
  vector<vector<int>> ans;
  queue<Node *> q;
  q.push(root);

  if (root == NULL)
    return ans;

  while (!q.empty()) {
    int size = q.size();
    vector<int> level;
    for (int i = 0; i < size; i++) {
      Node *node = q.front();
      q.pop();
      if (node->left != NULL)
        q.push(node->left);

      if (node->right != NULL)
        q.push(node->right);

      level.push_back(node->data);
    }
    ans.push_back(level);
  }

  return ans;
}

Node *buildTree(Node *root) {
  cout << "Enter the data" << endl;
  int d;
  cin >> d;
  root = new Node(d);

  if (d == -1) {
    return NULL;
  }

  cout << "Enter data to insert at left of " << d << endl;
  root->left = buildTree(root->left);

  cout << "Enter data to insert at right of " << d << endl;
  root->right = buildTree(root->right);

  return root;
}

int main() {
  Node *root = NULL;
  root = buildTree(root);
  // inorder(root);
  // preorder(root);
  // postorder(root);

  vector<vector<int>> ans = levelOrder(root);

  for (int i = 0; i < ans.size(); i++) {
    for (int j = 0; j < ans[i].size(); j++) {
      cout << ans[i][j] << " ";
    }
    cout << endl;
  }
}
