#include <bits/stdc++.h>
using namespace std;

class Node {
public:
  int data;
  Node *next;
  Node *prev;

  // constructor
  Node(int d) {
    this->data = d;
    this->next = NULL;
    this->prev = NULL;
  }

  // destructor
  ~Node() {
    if (next != NULL) {
      delete next;
      next = NULL;
    }
  }
};

void print(Node *&head) {
  Node *temp = head;
  while (temp != NULL) {
    cout << temp->data << " ";
    temp = temp->next;
  }
  cout << endl;
}

int getLen(Node *&head) {
  Node *temp = head;
  int length = 0;
  while (temp != NULL) {
    length++;
    temp = temp->next;
  }
  return length;
}

void insertAtHead(Node *&head, Node *&tail, int d) {

  if (tail == NULL) {
    Node *temp = new Node(d);
    head = temp;
    tail = temp;
  } else {
    Node *temp = new Node(d);
    temp->next = head;
    head->prev = temp;
    head = temp;
  }
}

void insertAtTail(Node *&head, Node *&tail, int d) {

  if (tail == NULL) {
    Node *temp = new Node(d);
    head = temp;
    tail = temp;
  } else {
    Node *temp = new Node(d);
    tail->next = temp;
    temp->prev = tail;
    tail = temp;
  }
}

void insertAtPosition(Node *&head, Node *&tail, int position, int d) {
  // insert at start
  if (position == 1) {
    insertAtHead(head, tail, d);
    return;
  }

  Node *temp = head;
  int cnt = 1;
  while (cnt < position - 1) {
    temp = temp->next;
    cnt++;
  }

  if (temp->next == NULL) {
    insertAtTail(head, tail, d);
    return;
  }

  Node *nodeToInsert = new Node(d);
  nodeToInsert->next = temp->next;
  temp->next->prev = nodeToInsert;
  temp->next = nodeToInsert;
  nodeToInsert->prev = temp;
}

void deleteNode(int position, Node *&head) {
  if (position == 1) {
    // deleting first node
    Node *temp = head;
    temp->next->prev = NULL;
    head = temp->next;
    temp->next = NULL;
    delete temp;
  } else {
    // deleting middle or last node
    Node *curr = head;
    Node *prev = NULL;

    int cnt = 1;
    while (cnt < position) {
      prev = curr;
      curr = curr->next;
      cnt++;
    }
    curr->prev = NULL;
    prev->next = curr->next;
    curr->next = NULL;

    delete curr;
  }
}

int main() {
  // Node *node1 = new Node(10);
  // Node *head = node1;
  // Node *tail = node1;

  Node *head = NULL;
  Node *tail = NULL;

  print(head);
  cout << getLen(head) << endl;

  insertAtHead(head, tail, 11);
  insertAtHead(head, tail, 13);
  insertAtHead(head, tail, 8);
  print(head);
  insertAtTail(head, tail, 25);
  print(head);
  insertAtPosition(head, tail, 2, 101);
  insertAtPosition(head, tail, 4, 203);
  print(head);
  deleteNode(6, head);
  print(head);
}
