// Singly LinkedList
#include <bits/stdc++.h>
using namespace std;

class Node {

public:
  int data;
  Node *next;

  // constructor
  Node(int data) {
    this->data = data;
    this->next = NULL;
  }

  // destructor
  ~Node() {
    int value = this->data;
    if (this->next != NULL) {
      delete next;
      this->next = NULL;
    }
  }
};

void insertAtHead(Node *&head, int d) {
  // new node creation
  Node *temp = new Node(d);
  temp->next = head;
  head = temp;
}

void insertAtTail(Node *&tail, int d) {
  // new node creation
  Node *temp = new Node(d);
  tail->next = temp;
  tail = temp;
}

void print(Node *&head) {
  Node *temp = head;
  while (temp != NULL) {
    cout << temp->data << " ";
    temp = temp->next;
  }
  cout << endl;
}

void insertAtPosition(Node *&tail, Node *&head, int position, int d) {
  // insertAtStart
  if (position == 1) {
    insertAtHead(head, d);
    return;
  }
  Node *temp = head;
  int cnt = 1;

  while (cnt < position - 1) {
    temp = temp->next;
    cnt++;
  }

  // insertion at last
  if (temp->next == NULL) {
    insertAtTail(tail, d);
    return;
  }

  // creating a new node for d
  Node *nodeToInsert = new Node(d);
  nodeToInsert->next = temp->next;
  temp->next = nodeToInsert;
}

void deletenode(int position, Node *&head) {
  if (position == 1) {
    Node *temp = head;
    head = head->next;
    // memory free on start node
    temp->next = NULL;
    delete temp;
  } else {
    Node *curr = head;
    Node *prev = NULL;

    int cnt = 1;
    while (cnt < position) {
      prev = curr;
      curr = curr->next;
      cnt++;
    }

    prev->next = curr->next;
    curr->next = NULL;
    delete curr;
  }
}

bool detectLoop(Node *head) {
  if (head == NULL)
    return 0;

  Node *temp = head;
  map<Node *, bool> visited;

  while (temp != NULL) {
    if (visited[temp] == true) {
      cout << "Present on element " << temp->data << endl;
      return true;
    }

    visited[temp] = true;
    temp = temp->next;
  }

  return false;
}

Node *floydDetectLoop(Node *head) {
  if (head == NULL)
    return NULL;

  Node *slow = head;
  Node *fast = head;

  while (slow != NULL && fast != NULL) {
    fast = fast->next;
    if (fast != NULL) {
      fast = fast->next;
    }

    slow = slow->next;

    if (slow == fast) {
      cout << "Present on element " << slow->data << endl;
      return slow;
    }
  }

  return NULL;
}

Node *getStartingNode(Node *head) {
  if (head == NULL)
    return NULL;

  Node *slow = head;
  Node *intersection = floydDetectLoop(head);

  while (slow != intersection) {
    slow = slow->next;
    intersection = intersection->next;
  }

  return slow;
}

void removeLoop(Node *head) {
  if (head == NULL)
    return;

  Node *start = getStartingNode(head);
  Node *temp = start;

  while (temp->next != start) {
    temp = temp->next;
  }

  temp->next = NULL;
}

int main() {
  Node *node1 = new Node(10);
  cout << node1->data << endl;
  cout << node1->next << endl;
  Node *head = node1;
  Node *tail = node1;

  // print(head);
  // insertAtHead(head, 12);

  insertAtTail(tail, 12);
  insertAtTail(tail, 15);
  insertAtPosition(tail, head, 4, 22);

  // print(head);
  //  print(tail);
  /*why tail is printing only 12 because in inserAtTail we are updating
  tail to the last temp folder*/
  // deletenode(1, head);
  tail->next = head->next;
  /*
  if(detectLoop(head)){
    cout << "Loop/Cycle is present" << endl;
  }
  else{
    cout << "Loop/Cycle is not present" << endl;
  }
*/
  if (floydDetectLoop(head) != NULL) {
    cout << "Loop/Cycle is present" << endl;
  } else {
    cout << "Loop/Cycle is not present" << endl;
  }

  Node *loop = getStartingNode(head);
  cout << "The starting node is " << loop->data << endl;

  removeLoop(head);
  print(head);
  // print(head);
}
